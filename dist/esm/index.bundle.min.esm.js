"use strict";var __createBinding=Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){e[o=void 0===o?r:o]=t[r]},__exportStar=function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||__createBinding(t,e,r)},__extends=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./errors","./logging"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),__exportStar(e("./errors"),t),__exportStar(e("./logging"),t)}),function(){var o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}()),__spreadArray=function(e,t,r){if(r||2===arguments.length)for(var o,n=0,a=t.length;n<a;n++)!o&&n in t||((o=o||Array.prototype.slice.call(t,0,n))[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))},__createBinding=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","../logging"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.CriticalError=t.LoggedError=t.criticalCallback=t.errorCallback=t.warningCallback=t.infoCallback=t.debugCallback=t.allCallback=t.loggedCallback=void 0;var i=e("../logging");function n(e,t,r){for(var o=[],n=3;n<arguments.length;n++)o[n-3]=arguments[n];r(new(a.bind.apply(a,__spreadArray([void 0,e,this&&"loggedCallback"!==this.name?this:void 0,t],o,!1))))}t.loggedCallback=n,t.allCallback=function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];n.call.apply(n,__spreadArray([this,e,i.LOGGER_LEVELS.ALL,t],r,!1))},t.debugCallback=function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];n.call.apply(n,__spreadArray([this,e,i.LOGGER_LEVELS.DEBUG,t],r,!1))},t.infoCallback=function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];n.call.apply(n,__spreadArray([this,e,i.LOGGER_LEVELS.INFO,t],r,!1))},t.warningCallback=function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];n.call.apply(n,__spreadArray([this,e,i.LOGGER_LEVELS.WARN,t],r,!1))},t.errorCallback=function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];n.call.apply(n,__spreadArray([this,e,i.LOGGER_LEVELS.ERROR,t],r,!1))},t.criticalCallback=function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];n.call.apply(n,__spreadArray([this,e,i.LOGGER_LEVELS.CRITICAL,t],r,!1))};c=Error,__extends(r,c);var c,a=r;function r(e,t,r){void 0===t&&(t=void 0),void 0===r&&(r=i.LOGGER_LEVELS.ALL);for(var o=[],n=3;n<arguments.length;n++)o[n-3]=arguments[n];var a=c.call(this,e instanceof Error?e.message:e)||this;return a.name="LoggedError",a.loggedAt=e instanceof Error&&"LoggedError"===e.name?e.loggedAt:void 0,a.issuer=t,(void 0===e.loggedAt||e.loggedAt<r)&&((e=(0,i.getLogger)()).report.apply(e,__spreadArray([a,r,t],o,!1)),a.loggedAt=r),a}t.LoggedError=a;__extends(o,l=a);var l,e=o;function o(e,t){void 0===t&&(t=void 0);for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];return l.apply(this,__spreadArray([e,t,i.LOGGER_LEVELS.CRITICAL],r,!1))||this}t.CriticalError=e}),Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){e[o=void 0===o?r:o]=t[r]}),__exportStar=function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||__createBinding(t,e,r)},__spreadArray=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./errors"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),__exportStar(e("./errors"),t)}),function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DAYS_OF_WEEK_NAMES=t.MONTH_NAMES=t.DEFAULT_TIMESTAMP_FORMAT=t.LOGGING_MSG=t.LOGGER_LEVELS=void 0,t.LOGGER_LEVELS={ALL:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,CRITICAL:5},t.LOGGING_MSG={LEVEL_CHANGED:"Logger Level changed from {0} to {1}",LOGGER_CHANGED:"Logger changed"},t.DEFAULT_TIMESTAMP_FORMAT="dd/MM/yyyy HH:mm:ss:S",t.MONTH_NAMES=["January","February","March","April","May","June","July","August","September","October","November","December"],t.DAYS_OF_WEEK_NAMES=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}),function(e,t,r){if(r||2===arguments.length)for(var o,n=0,a=t.length;n<a;n++)!o&&n in t||((o=o||Array.prototype.slice.call(t,0,n))[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))}),__createBinding=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","../errors","./logging","./constants"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.logSync=t.logAsync=t.StopWatch=void 0;var s=e("../errors"),p=e("./logging"),r=e("./constants"),u=(o.prototype.start=function(){this.startTime=Date.now()},o.prototype.check=function(){if(!this.startTime)throw new Error("StopWatch didnt start");return Date.now()-this.startTime},o.prototype.stop=function(){var e=this.check();return this.startTime=void 0,e},o);function o(){}t.StopWatch=u,t.logAsync=function(c,l){return void 0===c&&(c=r.LOGGER_LEVELS.DEBUG),l||"boolean"!=typeof c||(l=c,c=r.LOGGER_LEVELS.DEBUG),function(e,i,t){var r=t.value;t.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var o=e.pop();if(!o||"function"!=typeof o)throw new s.CriticalError("Missing Callback");var n,a=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this;(0,p.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",c,a,i,e.map(function(e){return e.toString()}).join(" | "));l&&(n=new u).start(),r.call.apply(r,__spreadArray(__spreadArray([this.__originalObject||this],e,!1),[function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",c,a,i,n.stop()),e)return(0,p.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",c,a,i,e),o(e);(0,p.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",c,a,i,t?t.map(function(e){return e.toString()}).join(" | "):"void"),o.apply(void 0,__spreadArray([void 0],t,!1))}],!1))}}},t.logSync=function(c,l){return void 0===c&&(c=r.LOGGER_LEVELS.DEBUG),l||"boolean"!=typeof c||(l=c,c=r.LOGGER_LEVELS.DEBUG),function(e,a,t){var i=t.value;t.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r,o=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this,n=((0,p.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",c,o,a,e.map(function(e){return e.toString()}).join(" | ")),void 0);l&&(n=new u).start();try{r=i.call.apply(i,__spreadArray([this.__originalObject||this],e,!1))}catch(e){throw n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",c,o,a,n.stop()),(0,p.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",c,o,a,e),e}return n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",c,o,a,n.stop()),(0,p.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",c,o,a,r||"void"),r}}}}),Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){e[o=void 0===o?r:o]=t[r]}),__exportStar=function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||__createBinding(t,e,r)},__spreadArray=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants","./logging","./decorators","./utils"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),__exportStar(e("./constants"),t),__exportStar(e("./logging"),t),__exportStar(e("./decorators"),t),__exportStar(e("./utils"),t)}),function(e,t,r){if(r||2===arguments.length)for(var o,n=0,a=t.length;n<a;n++)!o&&n in t||((o=o||Array.prototype.slice.call(t,0,n))[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))});!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants","./utils"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.critical=t.error=t.warn=t.debug=t.all=t.info=t.setLogger=t.getLogger=t.LoggerImp=void 0;var r,i=e("./constants"),a=e("./utils"),o=(n.prototype.buildMessage=function(e,t,r){void 0===r&&(r=void 0);for(var o=[],n=3;n<arguments.length;n++)o[n-3]=arguments[n];return e instanceof Error&&(e=e.message),r&&(e="[".concat(r.toString(),"]").concat(e)),this.logLevel&&(e="[".concat(Object.keys(i.LOGGER_LEVELS)[t],"] - ").concat(e)),this.useTimestamp&&(e="[".concat((0,a.formatDate)(new Date,this.timestampFormat),"]").concat(e)),a.stringFormat.apply(void 0,__spreadArray([e],o,!1))},n.prototype.report=function(e,t,r){void 0===t&&(t=i.LOGGER_LEVELS.INFO),void 0===r&&(r=void 0);for(var o,n=[],a=3;a<arguments.length;a++)n[a-3]=arguments[a];if(!(t<this.level)){switch(t){case i.LOGGER_LEVELS.WARN:o=console.warn;break;case i.LOGGER_LEVELS.ERROR:case i.LOGGER_LEVELS.CRITICAL:o=console.error;break;case i.LOGGER_LEVELS.INFO:case i.LOGGER_LEVELS.DEBUG:case i.LOGGER_LEVELS.ALL:default:o=console.log}o(this.buildMessage.apply(this,__spreadArray([e,t,r],n,!1))),e instanceof Error&&e.stack&&this.logStackTrace&&o(this.buildMessage("\n-- StackStrace:\n{0}",t,r,e.stack))}},n.prototype.info=function(e,t){void 0===t&&(t=void 0);for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.INFO,t],r,!1))},n.prototype.all=function(e,t){void 0===t&&(t=void 0);for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.ALL,t],r,!1))},n.prototype.debug=function(e,t){void 0===t&&(t=void 0);for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.DEBUG,t],r,!1))},n.prototype.warn=function(e,t){void 0===t&&(t=void 0);for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.WARN,t],r,!1))},n.prototype.error=function(e,t){void 0===t&&(t=void 0);for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.ERROR,t],r,!1))},n.prototype.critical=function(e,t){void 0===t&&(t=void 0);for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.CRITICAL,t],r,!1))},n.prototype.setLevel=function(e){this.debug((0,a.stringFormat)(i.LOGGING_MSG.LEVEL_CHANGED,this.level.toString(),e.toString())),this.level=e},n);function n(e,t,r,o,n){void 0===e&&(e=i.LOGGER_LEVELS.INFO),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===o&&(o=!1),void 0===n&&(n=i.DEFAULT_TIMESTAMP_FORMAT),this.level=e,this.useTimestamp=t,this.logLevel=r,this.logStackTrace=o,this.timestampFormat=n}function c(){return r=r||new o}t.LoggerImp=o,t.getLogger=c,t.setLogger=function(e){r=e,c().debug(i.LOGGING_MSG.LOGGER_CHANGED)};t.info=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];(t=c()).info.apply(t,__spreadArray([e,this],r,!1))},t.all=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];(t=c()).all.apply(t,__spreadArray([e,this],r,!1))},t.debug=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];(t=c()).debug.apply(t,__spreadArray([e,this],r,!1))},t.warn=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];(t=c()).warn.apply(t,__spreadArray([e,this],r,!1))},t.error=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];(t=c()).error.apply(t,__spreadArray([e,this],r,!1))};t.critical=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];(t=c()).critical.apply(t,__spreadArray([e,this],r,!1))}}),function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.twoDigitPad=t.formatDate=t.stringFormat=void 0;var G=e("./constants");function A(e){return e<10?"0"+e:e.toString()}t.stringFormat=function(e){for(var r=[],t=1;t<arguments.length;t++)r[t-1]=arguments[t];return e.replace(/{(\d+)}/g,function(e,t){return void 0!==r[t]?r[t]:e})},t.formatDate=function(e,t){void 0===t&&(t="yyyy/MM/dd");var r=e.getDate(),o=e.getMonth(),n=e.getFullYear(),a=e.getHours(),i=e.getMinutes(),c=e.getSeconds(),p=e.getMilliseconds(),l=a%12,u=A(l),d=A(a),f=A(i),g=A(c),_=a<12?"AM":"PM",y=(e=G.DAYS_OF_WEEK_NAMES[e.getDay()]).substr(0,3),E=A(r),s=o+1,L=A(s),h=(o=G.MONTH_NAMES[o]).substr(0,3),v=(n=n+"").substr(2,2);return t=-1<(t=t.replace("hh",u).replace("h",l.toString()).replace("HH",d).replace("H",a.toString()).replace("mm",f).replace("m",i.toString()).replace("ss",g).replace("s",c.toString()).replace("S",p.toString()).replace("dd",E).replace("d",r.toString()).replace("EEEE",e).replace("EEE",y).replace("yyyy",n).replace("yy",v).replace("aaa",_)).indexOf("MMM")?t.replace("MMMM",o).replace("MMM",h):t.replace("MM",L).replace("M",s.toString())},t.twoDigitPad=A});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
