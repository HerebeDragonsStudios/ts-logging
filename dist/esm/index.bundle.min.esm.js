"use strict";var __createBinding=Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){e[o=void 0===o?r:o]=t[r]},__exportStar=function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||__createBinding(t,e,r)},__extends=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./errors","./logging"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),__exportStar(e("./errors"),t),__exportStar(e("./logging"),t)}),function(){var o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}()),__createBinding=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","../logging"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.CriticalError=t.LoggedError=t.criticalCallback=t.errorCallback=t.warningCallback=t.infoCallback=t.debugCallback=t.allCallback=t.loggedCallback=void 0;var o=e("../logging");function r(e,t,r){r||(r=t,t=o.LOGGER_LEVELS.INFO),(0,o.getLogger)().report(e instanceof Error?e:new i(e),t,"loggedCallback"!==this.name?this:void 0),r(e)}t.loggedCallback=r,t.allCallback=function(e,t){r.call(this,e,o.LOGGER_LEVELS.ALL,t)},t.debugCallback=function(e,t){r.call(this,e,o.LOGGER_LEVELS.DEBUG,t)},t.infoCallback=function(e,t){r.call(this,e,o.LOGGER_LEVELS.INFO,t)},t.warningCallback=function(e,t){r.call(this,e,o.LOGGER_LEVELS.WARN,t)},t.errorCallback=function(e,t){r.call(this,e,o.LOGGER_LEVELS.ERROR,t)},t.criticalCallback=function(e,t){r.call(this,e,o.LOGGER_LEVELS.CRITICAL,t)};n=Error,__extends(a,n);var n,i=a;function a(e,t){void 0===t&&(t=o.LOGGER_LEVELS.ERROR);var r=n.call(this,e instanceof Error?e.message:e)||this;return r.logged=!1,r.logged=e instanceof a&&e.logged,r.logged||(0,o.getLogger)().report(e,t),r}t.LoggedError=i;__extends(l,c=i);var c,e=l;function l(e){return c.call(this,e,o.LOGGER_LEVELS.CRITICAL)||this}t.CriticalError=e}),Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){e[o=void 0===o?r:o]=t[r]}),__exportStar=function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||__createBinding(t,e,r)},__spreadArray=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./errors"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),__exportStar(e("./errors"),t)}),function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DAYS_OF_WEEK_NAMES=t.MONTH_NAMES=t.DEFAULT_TIMESTAMP_FORMAT=t.LOGGING_MSG=t.LOGGER_LEVELS=void 0,t.LOGGER_LEVELS={ALL:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,CRITICAL:5},t.LOGGING_MSG={LEVEL_CHANGED:"Logger Level changed from {0} to {1}",LOGGER_CHANGED:"Logger changed"},t.DEFAULT_TIMESTAMP_FORMAT="dd/MM/yyyy HH:mm:ss:S",t.MONTH_NAMES=["January","February","March","April","May","June","July","August","September","October","November","December"],t.DAYS_OF_WEEK_NAMES=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}),function(e,t,r){if(r||2===arguments.length)for(var o,n=0,i=t.length;n<i;n++)!o&&n in t||((o=o||Array.prototype.slice.call(t,0,n))[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))}),__createBinding=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","../errors","./logging","./constants"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.logSync=t.logAsync=t.StopWatch=void 0;var s=e("../errors"),p=e("./logging"),r=e("./constants"),u=(o.prototype.start=function(){this.startTime=Date.now()},o.prototype.check=function(){if(!this.startTime)throw new Error("StopWatch didnt start");return Date.now()-this.startTime},o.prototype.stop=function(){var e=this.check();return this.startTime=void 0,e},o);function o(){}t.StopWatch=u,t.logAsync=function(c,l){return void 0===c&&(c=r.LOGGER_LEVELS.DEBUG),l||"boolean"!=typeof c||(l=c,c=r.LOGGER_LEVELS.DEBUG),function(e,a,t){var r=t.value;t.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var o=e.pop();if(!o||"function"!=typeof o)throw new s.CriticalError("Missing Callback");var n,i=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this;(0,p.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",c,i,a,e.map(function(e){return e.toString()}).join(" | "));l&&(n=new u).start(),r.call.apply(r,__spreadArray(__spreadArray([this.__originalObject||this],e,!1),[function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",c,i,a,n.stop()),e)return(0,p.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",c,i,a,e),o(e);(0,p.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",c,i,a,t?t.map(function(e){return e.toString()}).join(" | "):"void"),o.apply(void 0,__spreadArray([void 0],t,!1))}],!1))}}},t.logSync=function(c,l){return void 0===c&&(c=r.LOGGER_LEVELS.DEBUG),l||"boolean"!=typeof c||(l=c,c=r.LOGGER_LEVELS.DEBUG),function(e,i,t){var a=t.value;t.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r,o=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this,n=((0,p.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",c,o,i,e.map(function(e){return e.toString()}).join(" | ")),void 0);l&&(n=new u).start();try{r=a.call.apply(a,__spreadArray([this.__originalObject||this],e,!1))}catch(e){throw n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",c,o,i,n.stop()),(0,p.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",c,o,i,e),e}return n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",c,o,i,n.stop()),(0,p.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",c,o,i,r||"void"),r}}}}),Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){e[o=void 0===o?r:o]=t[r]}),__exportStar=function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||__createBinding(t,e,r)},__spreadArray=(!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants","./logging","./decorators","./utils"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),__exportStar(e("./constants"),t),__exportStar(e("./logging"),t),__exportStar(e("./decorators"),t),__exportStar(e("./utils"),t)}),function(e,t,r){if(r||2===arguments.length)for(var o,n=0,i=t.length;n<i;n++)!o&&n in t||((o=o||Array.prototype.slice.call(t,0,n))[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))});!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants","../errors","./utils"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.critical=t.error=t.warn=t.debug=t.all=t.info=t.setLogger=t.getLogger=t.LoggerImp=void 0;var r,i=e("./constants"),a=e("../errors"),c=e("./utils"),o=(n.prototype.buildMessage=function(e,t,r){void 0===r&&(r=void 0);for(var o=[],n=3;n<arguments.length;n++)o[n-3]=arguments[n];return e instanceof Error&&(e.stack,e=e.message),this.logLevel&&(e="[".concat(Object.keys(i.LOGGER_LEVELS)[t],"] - ").concat(e)),r&&(e="[".concat(r.toString(),"]").concat(e)),this.useTimestamp&&(e="[".concat((0,c.formatDate)(new Date,this.timestampFormat),"]").concat(e)),c.stringFormat.apply(void 0,__spreadArray([e],o,!1))},n.prototype.report=function(e,t){void 0===t&&(t=i.LOGGER_LEVELS.INFO);for(var r,o=[],n=2;n<arguments.length;n++)o[n-2]=arguments[n];if(!(t<this.level||e instanceof a.LoggedError&&e.logged)){switch(t){case i.LOGGER_LEVELS.WARN:r=console.warn;break;case i.LOGGER_LEVELS.ERROR:case i.LOGGER_LEVELS.CRITICAL:r=console.error;break;case i.LOGGER_LEVELS.INFO:case i.LOGGER_LEVELS.DEBUG:case i.LOGGER_LEVELS.ALL:default:r=console.log}r(this.buildMessage.apply(this,__spreadArray([e,t,void 0],o,!1))),e instanceof Error&&e.stack&&this.logStackTrace&&(console.log(e),r(this.buildMessage("\n-- StackStrace:\n".concat(e.stack),t))),e instanceof a.LoggedError&&(e.logged=!0)}},n.prototype.info=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.INFO],t,!1))},n.prototype.all=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.ALL],t,!1))},n.prototype.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.DEBUG],t,!1))},n.prototype.warn=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.WARN],t,!1))},n.prototype.error=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.ERROR],t,!1))},n.prototype.critical=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.report.apply(this,__spreadArray([e,i.LOGGER_LEVELS.CRITICAL],t,!1))},n.prototype.setLevel=function(e){this.debug((0,c.stringFormat)(i.LOGGING_MSG.LEVEL_CHANGED,this.level.toString(),e.toString())),this.level=e},n);function n(e,t,r,o,n){void 0===e&&(e=i.LOGGER_LEVELS.INFO),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===o&&(o=!1),void 0===n&&(n=i.DEFAULT_TIMESTAMP_FORMAT),this.level=e,this.useTimestamp=t,this.logLevel=r,this.logStackTrace=o,this.timestampFormat=n}function l(){return r=r||new o}t.LoggerImp=o,t.getLogger=l,t.setLogger=function(e){r=e,l().debug(i.LOGGING_MSG.LOGGER_CHANGED)};t.info=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];return(t=l()).info.apply(t,__spreadArray([e],r,!1))},t.all=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];return(t=l()).all.apply(t,__spreadArray([e],r,!1))},t.debug=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];return(t=l()).debug.apply(t,__spreadArray([e],r,!1))},t.warn=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];return(t=l()).warn.apply(t,__spreadArray([e],r,!1))},t.error=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];return(t=l()).error.apply(t,__spreadArray([e],r,!1))};t.critical=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];return(t=l()).critical.apply(t,__spreadArray([e],r,!1))}}),function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.twoDigitPad=t.formatDate=t.stringFormat=void 0;var G=e("./constants");function O(e){return e<10?"0"+e:e.toString()}t.stringFormat=function(e){for(var r=[],t=1;t<arguments.length;t++)r[t-1]=arguments[t];return e.replace(/{(\d+)}/g,function(e,t){return void 0!==r[t]?r[t]:e})},t.formatDate=function(e,t){void 0===t&&(t="yyyy/MM/dd");var r=e.getDate(),o=e.getMonth(),n=e.getFullYear(),i=e.getHours(),a=e.getMinutes(),c=e.getSeconds(),p=e.getMilliseconds(),l=i%12,u=O(l),f=O(i),g=O(a),d=O(c),_=i<12?"AM":"PM",E=(e=G.DAYS_OF_WEEK_NAMES[e.getDay()]).substr(0,3),L=O(r),s=o+1,y=O(s),h=(o=G.MONTH_NAMES[o]).substr(0,3),v=(n=n+"").substr(2,2);return t=-1<(t=t.replace("hh",u).replace("h",l.toString()).replace("HH",f).replace("H",i.toString()).replace("mm",g).replace("m",a.toString()).replace("ss",d).replace("s",c.toString()).replace("S",p.toString()).replace("dd",L).replace("d",r.toString()).replace("EEEE",e).replace("EEE",E).replace("yyyy",n).replace("yy",v).replace("aaa",_)).indexOf("MMM")?t.replace("MMMM",o).replace("MMM",h):t.replace("MM",y).replace("M",s.toString())},t.twoDigitPad=O});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
