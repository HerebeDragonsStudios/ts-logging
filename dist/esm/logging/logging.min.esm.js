"use strict";var __spreadArray=function(r,t,e){if(e||2===arguments.length)for(var o,a=0,n=t.length;a<n;a++)!o&&a in t||((o=o||Array.prototype.slice.call(t,0,a))[a]=t[a]);return r.concat(o||Array.prototype.slice.call(t))};!function(r){"object"==typeof module&&"object"==typeof module.exports?r(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants","../errors","./utils"],r)}(function(r,t){Object.defineProperty(t,"__esModule",{value:!0}),t.critical=t.error=t.warn=t.debug=t.all=t.info=t.setLogger=t.getLogger=t.LoggerImp=void 0;var e,n=r("./constants"),i=r("../errors"),s=r("./utils"),o=(a.prototype.buildMessage=function(r,t,e){void 0===e&&(e=void 0);for(var o=[],a=3;a<arguments.length;a++)o[a-3]=arguments[a];return r instanceof Error&&(r.stack,r=r.message),this.logLevel&&(r="[".concat(Object.keys(n.LOGGER_LEVELS)[t],"] - ").concat(r)),e&&(r="[".concat(e.toString(),"]").concat(r)),this.useTimestamp&&(r="[".concat((0,s.formatDate)(new Date,this.timestampFormat),"]").concat(r)),s.stringFormat.apply(void 0,__spreadArray([r],o,!1))},a.prototype.report=function(r,t){void 0===t&&(t=n.LOGGER_LEVELS.INFO);for(var e,o=[],a=2;a<arguments.length;a++)o[a-2]=arguments[a];if(!(t<this.level||r instanceof i.LoggedError&&r.logged)){switch(t){case n.LOGGER_LEVELS.WARN:e=console.warn;break;case n.LOGGER_LEVELS.ERROR:case n.LOGGER_LEVELS.CRITICAL:e=console.error;break;case n.LOGGER_LEVELS.INFO:case n.LOGGER_LEVELS.DEBUG:case n.LOGGER_LEVELS.ALL:default:e=console.log}e(this.buildMessage.apply(this,__spreadArray([r,t,void 0],o,!1))),r instanceof Error&&r.stack&&this.logStackTrace&&(console.log(r),e(this.buildMessage("\n-- StackStrace:\n".concat(r.stack),t))),r instanceof i.LoggedError&&(r.logged=!0)}},a.prototype.info=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.INFO],t,!1))},a.prototype.all=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.ALL],t,!1))},a.prototype.debug=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.DEBUG],t,!1))},a.prototype.warn=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.WARN],t,!1))},a.prototype.error=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.ERROR],t,!1))},a.prototype.critical=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.CRITICAL],t,!1))},a.prototype.setLevel=function(r){this.debug((0,s.stringFormat)(n.LOGGING_MSG.LEVEL_CHANGED,this.level.toString(),r.toString())),this.level=r},a);function a(r,t,e,o,a){void 0===r&&(r=n.LOGGER_LEVELS.INFO),void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===o&&(o=!1),void 0===a&&(a=n.DEFAULT_TIMESTAMP_FORMAT),this.level=r,this.useTimestamp=t,this.logLevel=e,this.logStackTrace=o,this.timestampFormat=a}function p(){return e=e||new o}t.LoggerImp=o,t.getLogger=p,t.setLogger=function(r){e=r,p().debug(n.LOGGING_MSG.LOGGER_CHANGED)};t.info=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=p()).info.apply(t,__spreadArray([r],e,!1))},t.all=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=p()).all.apply(t,__spreadArray([r],e,!1))},t.debug=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=p()).debug.apply(t,__spreadArray([r],e,!1))},t.warn=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=p()).warn.apply(t,__spreadArray([r],e,!1))},t.error=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=p()).error.apply(t,__spreadArray([r],e,!1))};t.critical=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=p()).critical.apply(t,__spreadArray([r],e,!1))}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
