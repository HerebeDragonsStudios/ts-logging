"use strict";var __spreadArray=function(r,t,e){if(e||2===arguments.length)for(var o,a=0,i=t.length;a<i;a++)!o&&a in t||((o=o||Array.prototype.slice.call(t,0,a))[a]=t[a]);return r.concat(o||Array.prototype.slice.call(t))};!function(r){"object"==typeof module&&"object"==typeof module.exports?r(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants","./utils"],r)}(function(r,t){Object.defineProperty(t,"__esModule",{value:!0}),t.critical=t.error=t.warn=t.debug=t.all=t.info=t.setLogger=t.getLogger=t.LoggerImp=void 0;var e,n=r("./constants"),i=r("./utils"),o=(a.prototype.buildMessage=function(r,t,e){void 0===e&&(e=void 0);for(var o=[],a=3;a<arguments.length;a++)o[a-3]=arguments[a];return r instanceof Error&&(r=r.message),this.logLevel&&(r="[".concat(Object.keys(n.LOGGER_LEVELS)[t],"] - ").concat(r)),e&&(r="[".concat(e.toString(),"]").concat(r)),this.useTimestamp&&(r="[".concat((0,i.formatDate)(new Date,this.timestampFormat),"]").concat(r)),i.stringFormat.apply(void 0,__spreadArray([r],o,!1))},a.prototype.report=function(r,t,e){void 0===t&&(t=n.LOGGER_LEVELS.INFO),void 0===e&&(e=void 0);for(var o,a=[],i=3;i<arguments.length;i++)a[i-3]=arguments[i];if(!(t<this.level)){switch(t){case n.LOGGER_LEVELS.WARN:o=console.warn;break;case n.LOGGER_LEVELS.ERROR:case n.LOGGER_LEVELS.CRITICAL:o=console.error;break;case n.LOGGER_LEVELS.INFO:case n.LOGGER_LEVELS.DEBUG:case n.LOGGER_LEVELS.ALL:default:o=console.log}o(this.buildMessage.apply(this,__spreadArray([r,t,e],a,!1))),r instanceof Error&&r.stack&&this.logStackTrace&&o(this.buildMessage("\n-- StackStrace:\n{0}",t,e,r.stack))}},a.prototype.info=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.INFO,t],e,!1))},a.prototype.all=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.ALL,t],e,!1))},a.prototype.debug=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.DEBUG,t],e,!1))},a.prototype.warn=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.WARN,t],e,!1))},a.prototype.error=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.ERROR,t],e,!1))},a.prototype.critical=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,n.LOGGER_LEVELS.CRITICAL,t],e,!1))},a.prototype.setLevel=function(r){this.debug((0,i.stringFormat)(n.LOGGING_MSG.LEVEL_CHANGED,this.level.toString(),r.toString())),this.level=r},a);function a(r,t,e,o,a){void 0===r&&(r=n.LOGGER_LEVELS.INFO),void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===o&&(o=!1),void 0===a&&(a=n.DEFAULT_TIMESTAMP_FORMAT),this.level=r,this.useTimestamp=t,this.logLevel=e,this.logStackTrace=o,this.timestampFormat=a}function s(){return e=e||new o}t.LoggerImp=o,t.getLogger=s,t.setLogger=function(r){e=r,s().debug(n.LOGGING_MSG.LOGGER_CHANGED)};t.info=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=s()).info.apply(t,__spreadArray([r,this],e,!1))},t.all=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=s()).all.apply(t,__spreadArray([r,this],e,!1))},t.debug=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=s()).debug.apply(t,__spreadArray([r,this],e,!1))},t.warn=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=s()).warn.apply(t,__spreadArray([r,this],e,!1))},t.error=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=s()).error.apply(t,__spreadArray([r,this],e,!1))};t.critical=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=s()).critical.apply(t,__spreadArray([r,this],e,!1))}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
