"use strict";var __spreadArray=function(t,r,e){if(e||2===arguments.length)for(var o,n=0,i=r.length;n<i;n++)!o&&n in r||((o=o||Array.prototype.slice.call(r,0,n))[n]=r[n]);return t.concat(o||Array.prototype.slice.call(r))};!function(t){"object"==typeof module&&"object"==typeof module.exports?t(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","../errors","./logging","./constants"],t)}(function(t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.logSync=r.logAsync=r.StopWatch=void 0;var g=t("../errors"),p=t("./logging"),e=t("./constants"),h=(o.prototype.start=function(){this.startTime=Date.now()},o.prototype.check=function(){if(!this.startTime)throw new Error("StopWatch didnt start");return Date.now()-this.startTime},o.prototype.stop=function(){var t=this.check();return this.startTime=void 0,t},o);function o(){}r.StopWatch=h,r.logAsync=function(s,c){return void 0===s&&(s=e.LOGGER_LEVELS.DEBUG),c||"boolean"!=typeof s||(c=s,s=e.LOGGER_LEVELS.DEBUG),function(t,a,r){var e=r.value;r.value=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o=t.pop();if(!o||"function"!=typeof o)throw new g.CriticalError("Missing Callback");var n,i=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this;(0,p.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",s,i,a,t.map(function(t){return t.toString()}).join(" | "));c&&(n=new h).start(),e.call.apply(e,__spreadArray(__spreadArray([this.__originalObject||this],t,!1),[function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];if(n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,i,a,n.stop()),t)return(0,p.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",s,i,a,t),o(t);(0,p.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",s,i,a,r?r.map(function(t){return t.toString()}).join(" | "):"void"),o.apply(void 0,__spreadArray([void 0],r,!1))}],!1))}}},r.logSync=function(s,c){return void 0===s&&(s=e.LOGGER_LEVELS.DEBUG),c||"boolean"!=typeof s||(c=s,s=e.LOGGER_LEVELS.DEBUG),function(t,i,r){var a=r.value;r.value=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e,o=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this,n=((0,p.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",s,o,i,t.map(function(t){return t.toString()}).join(" | ")),void 0);c&&(n=new h).start();try{e=a.call.apply(a,__spreadArray([this.__originalObject||this],t,!1))}catch(t){throw n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,o,i,n.stop()),(0,p.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",s,o,i,t),t}return n&&(0,p.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,o,i,n.stop()),(0,p.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",s,o,i,e||"void"),e}}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
