"use strict";!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","./constants"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.twoDigitPad=t.formatDate=t.stringFormat=void 0;var D=e("./constants");function b(e){return e<10?"0"+e:e.toString()}t.stringFormat=function(e){for(var r=[],t=1;t<arguments.length;t++)r[t-1]=arguments[t];return e.replace(/{(\d+)}/g,function(e,t){return void 0!==r[t]?r[t]:e})},t.formatDate=function(e,t){void 0===t&&(t="yyyy/MM/dd");var r=e.getDate(),o=e.getMonth(),a=e.getFullYear(),n=e.getHours(),c=e.getMinutes(),i=e.getSeconds(),s=e.getMilliseconds(),l=n%12,u=b(l),M=b(n),d=b(c),g=b(i),f=n<12?"AM":"PM",y=(e=D.DAYS_OF_WEEK_NAMES[e.getDay()]).substr(0,3),S=b(r),p=o+1,E=b(p),m=(o=D.MONTH_NAMES[o]).substr(0,3),v=(a=a+"").substr(2,2);return t=-1<(t=t.replace("hh",u).replace("h",l.toString()).replace("HH",M).replace("H",n.toString()).replace("mm",d).replace("m",c.toString()).replace("ss",g).replace("s",i.toString()).replace("S",s.toString()).replace("dd",S).replace("d",r.toString()).replace("EEEE",e).replace("EEE",y).replace("yyyy",a).replace("yy",v).replace("aaa",f)).indexOf("MMM")?t.replace("MMMM",o).replace("MMM",m):t.replace("MM",E).replace("M",p.toString())},t.twoDigitPad=b});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
