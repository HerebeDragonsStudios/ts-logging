"use strict";var __extends=function(){var e=function(t,o){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(t,o)};return function(t,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();!function(t){"object"==typeof module&&"object"==typeof module.exports?t(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","../logging"],t)}(function(t,o){Object.defineProperty(o,"__esModule",{value:!0}),o.CriticalError=o.LoggedError=o.criticalCallback=o.errorCallback=o.warningCallback=o.infoCallback=o.debugCallback=o.allCallback=o.loggedCallback=void 0;var e=t("../logging");function r(t,o,r){r||(r=o,o=e.LOGGER_LEVELS.INFO),(0,e.getLogger)().report(t instanceof Error?t:new l(t),o,"loggedCallback"!==this.name?this:void 0),r(t)}o.loggedCallback=r,o.allCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.ALL,o)},o.debugCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.DEBUG,o)},o.infoCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.INFO,o)},o.warningCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.WARN,o)},o.errorCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.ERROR,o)},o.criticalCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.CRITICAL,o)};n=Error,__extends(a,n);var n,l=a;function a(t,o){void 0===o&&(o=e.LOGGER_LEVELS.ERROR);var r=n.call(this,t instanceof Error?t.message:t)||this;return r.logged=!1,r.logged=t instanceof a&&t.logged,r.logged||(0,e.getLogger)().report(t,o),r}o.LoggedError=l;__extends(i,c=l);var c,t=i;function i(t){return c.call(this,t,e.LOGGER_LEVELS.CRITICAL)||this}o.CriticalError=t});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9ycy9lcnJvcnMuanMiLCJlcnJvcnMvZXJyb3JzLnRzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIl9fcHJvdG9fXyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJwIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZXJyb3JDYWxsYmFjayIsIndhcm5pbmdDYWxsYmFjayIsImluZm9DYWxsYmFjayIsImRlYnVnQ2FsbGJhY2siLCJhbGxDYWxsYmFjayIsImxvZ2dlZENhbGxiYWNrIiwibG9nZ2luZ18xIiwibWVzc2FnZSIsImxldmVsIiwiY2FsbGJhY2siLCJMT0dHRVJfTEVWRUxTIiwiSU5GTyIsImdldExvZ2dlciIsInJlcG9ydCIsIkVycm9yIiwiTG9nZ2VkRXJyb3IiLCJuYW1lIiwidW5kZWZpbmVkIiwiQUxMIiwiREVCVUciLCJXQVJOIiwiRVJST1IiLCJjcml0aWNhbENhbGxiYWNrIiwiQ1JJVElDQUwiLCJfc3VwZXIiLCJlcnJvciIsIl90aGlzIiwibG9nZ2VkIiwiQ3JpdGljYWxFcnJvciJdLCJtYXBwaW5ncyI6ImFBQUEsSUFBSUEsVUFBeUMsV0FDekMsSUFBSUMsRUFBZ0IsU0FBVUMsRUFBR0MsR0FFdEJDLE9BSFhKLEVBQWFLLE9BQVFDLGdCQUNqQkwsQ0FBQUEsVUFBZ0IsY0FBQU0sT0FBQSxTQUFnQkwsRUFBQUMsR0FBQUQsRUFBQUUsVUFBQUQsSUFDaENGLFNBQWdCSSxFQUFBQSxHQUFPQyxJQUFBQSxJQUFBQSxLQUFQSCxFQUNYRSxPQUFBRyxVQUFBQyxlQUFBQyxLQUFBUCxFQUFBUSxLQUFBVCxFQUFBUyxH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bi5lc20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciB2ID0gZmFjdG9yeShyZXF1aXJlLCBleHBvcnRzKTtcbiAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgbW9kdWxlLmV4cG9ydHMgPSB2O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoW1wicmVxdWlyZVwiLCBcImV4cG9ydHNcIiwgXCIuLi9sb2dnaW5nXCJdLCBmYWN0b3J5KTtcbiAgICB9XG59KShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLkNyaXRpY2FsRXJyb3IgPSBleHBvcnRzLkxvZ2dlZEVycm9yID0gZXhwb3J0cy5jcml0aWNhbENhbGxiYWNrID0gZXhwb3J0cy5lcnJvckNhbGxiYWNrID0gZXhwb3J0cy53YXJuaW5nQ2FsbGJhY2sgPSBleHBvcnRzLmluZm9DYWxsYmFjayA9IGV4cG9ydHMuZGVidWdDYWxsYmFjayA9IGV4cG9ydHMuYWxsQ2FsbGJhY2sgPSBleHBvcnRzLmxvZ2dlZENhbGxiYWNrID0gdm9pZCAwO1xuICAgIHZhciBsb2dnaW5nXzEgPSByZXF1aXJlKFwiLi4vbG9nZ2luZ1wiKTtcbiAgICBmdW5jdGlvbiBsb2dnZWRDYWxsYmFjayhtZXNzYWdlLCBsZXZlbCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBsZXZlbDtcbiAgICAgICAgICAgIGxldmVsID0gbG9nZ2luZ18xLkxPR0dFUl9MRVZFTFMuSU5GTztcbiAgICAgICAgfVxuICAgICAgICAoMCwgbG9nZ2luZ18xLmdldExvZ2dlcikoKS5yZXBvcnQobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yID8gbWVzc2FnZSA6IG5ldyBMb2dnZWRFcnJvcihtZXNzYWdlKSwgbGV2ZWwsIHRoaXMubmFtZSAhPT0gXCJsb2dnZWRDYWxsYmFja1wiID8gdGhpcyA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBleHBvcnRzLmxvZ2dlZENhbGxiYWNrID0gbG9nZ2VkQ2FsbGJhY2s7XG4gICAgZnVuY3Rpb24gYWxsQ2FsbGJhY2sobWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgICAgICAgbG9nZ2VkQ2FsbGJhY2suY2FsbCh0aGlzLCBtZXNzYWdlLCBsb2dnaW5nXzEuTE9HR0VSX0xFVkVMUy5BTEwsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZXhwb3J0cy5hbGxDYWxsYmFjayA9IGFsbENhbGxiYWNrO1xuICAgIGZ1bmN0aW9uIGRlYnVnQ2FsbGJhY2sobWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgICAgICAgbG9nZ2VkQ2FsbGJhY2suY2FsbCh0aGlzLCBtZXNzYWdlLCBsb2dnaW5nXzEuTE9HR0VSX0xFVkVMUy5ERUJVRywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBleHBvcnRzLmRlYnVnQ2FsbGJhY2sgPSBkZWJ1Z0NhbGxiYWNrO1xuICAgIGZ1bmN0aW9uIGluZm9DYWxsYmFjayhtZXNzYWdlLCBjYWxsYmFjaykge1xuICAgICAgICBsb2dnZWRDYWxsYmFjay5jYWxsKHRoaXMsIG1lc3NhZ2UsIGxvZ2dpbmdfMS5MT0dHRVJfTEVWRUxTLklORk8sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZXhwb3J0cy5pbmZvQ2FsbGJhY2sgPSBpbmZvQ2FsbGJhY2s7XG4gICAgZnVuY3Rpb24gd2FybmluZ0NhbGxiYWNrKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxvZ2dlZENhbGxiYWNrLmNhbGwodGhpcywgbWVzc2FnZSwgbG9nZ2luZ18xLkxPR0dFUl9MRVZFTFMuV0FSTiwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBleHBvcnRzLndhcm5pbmdDYWxsYmFjayA9IHdhcm5pbmdDYWxsYmFjaztcbiAgICBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxvZ2dlZENhbGxiYWNrLmNhbGwodGhpcywgbWVzc2FnZSwgbG9nZ2luZ18xLkxPR0dFUl9MRVZFTFMuRVJST1IsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZXhwb3J0cy5lcnJvckNhbGxiYWNrID0gZXJyb3JDYWxsYmFjaztcbiAgICBmdW5jdGlvbiBjcml0aWNhbENhbGxiYWNrKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxvZ2dlZENhbGxiYWNrLmNhbGwodGhpcywgbWVzc2FnZSwgbG9nZ2luZ18xLkxPR0dFUl9MRVZFTFMuQ1JJVElDQUwsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZXhwb3J0cy5jcml0aWNhbENhbGxiYWNrID0gY3JpdGljYWxDYWxsYmFjaztcbiAgICB2YXIgTG9nZ2VkRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoTG9nZ2VkRXJyb3IsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIExvZ2dlZEVycm9yKGVycm9yLCBsZXZlbCkge1xuICAgICAgICAgICAgaWYgKGxldmVsID09PSB2b2lkIDApIHsgbGV2ZWwgPSBsb2dnaW5nXzEuTE9HR0VSX0xFVkVMUy5FUlJPUjsgfVxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvcikgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmxvZ2dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMubG9nZ2VkID0gZXJyb3IgaW5zdGFuY2VvZiBMb2dnZWRFcnJvciAmJiBlcnJvci5sb2dnZWQ7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmxvZ2dlZClcbiAgICAgICAgICAgICAgICAoMCwgbG9nZ2luZ18xLmdldExvZ2dlcikoKS5yZXBvcnQoZXJyb3IsIGxldmVsKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTG9nZ2VkRXJyb3I7XG4gICAgfShFcnJvcikpO1xuICAgIGV4cG9ydHMuTG9nZ2VkRXJyb3IgPSBMb2dnZWRFcnJvcjtcbiAgICB2YXIgQ3JpdGljYWxFcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhDcml0aWNhbEVycm9yLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBDcml0aWNhbEVycm9yKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZXJyb3IsIGxvZ2dpbmdfMS5MT0dHRVJfTEVWRUxTLkNSSVRJQ0FMKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDcml0aWNhbEVycm9yO1xuICAgIH0oTG9nZ2VkRXJyb3IpKTtcbiAgICBleHBvcnRzLkNyaXRpY2FsRXJyb3IgPSBDcml0aWNhbEVycm9yO1xufSk7IiwiaW1wb3J0IHtDYWxsYmFjaywgZ2V0TG9nZ2VyLCBMT0dHRVJfTEVWRUxTLCBMb2dnZXJNZXNzYWdlfSBmcm9tIFwiLi4vbG9nZ2luZ1wiO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHBhcmFtIHtudW1iZXJ9IGxldmVsXG4gKiBAcGFyYW0ge0NhbGxiYWNrfSBjYWxsYmFja1xuICpcbiAqIEBmdW5jdGlvbiBsb2dnZWRDYWxsYmFja1xuICpcbiAqIEBtZW1iZXJPZiBkYi1kZWNvcmF0b3JzLmVycm9yc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbG9nZ2VkQ2FsbGJhY2sodGhpczogYW55LCBtZXNzYWdlOiBMb2dnZXJNZXNzYWdlLCBsZXZlbDogbnVtYmVyIHwgQ2FsbGJhY2ssIGNhbGxiYWNrOiBDYWxsYmFjayl7XG4gICAgaWYgKCFjYWxsYmFjayl7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY2FsbGJhY2sgPSBsZXZlbDtcbiAgICAgICAgbGV2ZWwgPSBMT0dHRVJfTEVWRUxTLklORk87XG4gICAgfVxuXG4gICAgZ2V0TG9nZ2VyKCkucmVwb3J0KG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvciA/IG1lc3NhZ2UgOiBuZXcgTG9nZ2VkRXJyb3IobWVzc2FnZSksIGxldmVsIGFzIG51bWJlciwgdGhpcy5uYW1lICE9PSBcImxvZ2dlZENhbGxiYWNrXCIgPyB0aGlzIDogdW5kZWZpbmVkKTtcbiAgICBjYWxsYmFjayhtZXNzYWdlKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtMb2dnZXJNZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0NhbGxiYWNrfSBjYWxsYmFja1xuICpcbiAqIEBmdW5jdGlvbiBhbGxDYWxsYmFja1xuICpcbiAqIEBtZW1iZXJPZiBkYi1kZWNvcmF0b3JzLmVycm9yc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsQ2FsbGJhY2sodGhpczogYW55LCBtZXNzYWdlOiBMb2dnZXJNZXNzYWdlLCBjYWxsYmFjazogQ2FsbGJhY2spe1xuICAgIGxvZ2dlZENhbGxiYWNrLmNhbGwodGhpcywgbWVzc2FnZSwgTE9HR0VSX0xFVkVMUy5BTEwsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtMb2dnZXJNZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0NhbGxiYWNrfSBjYWxsYmFja1xuICpcbiAqIEBmdW5jdGlvbiBkZWJ1Z0NhbGxiYWNrXG4gKlxuICogQG1lbWJlck9mIGRiLWRlY29yYXRvcnMuZXJyb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z0NhbGxiYWNrKHRoaXM6IGFueSwgbWVzc2FnZTogTG9nZ2VyTWVzc2FnZSwgY2FsbGJhY2s6IENhbGxiYWNrKXtcbiAgICBsb2dnZWRDYWxsYmFjay5jYWxsKHRoaXMsIG1lc3NhZ2UsIExPR0dFUl9MRVZFTFMuREVCVUcsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtMb2dnZXJNZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0NhbGxiYWNrfSBjYWxsYmFja1xuICpcbiAqIEBmdW5jdGlvbiBpbmZvQ2FsbGJhY2tcbiAqXG4gKiBAbWVtYmVyT2YgZGItZGVjb3JhdG9ycy5lcnJvcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluZm9DYWxsYmFjayh0aGlzOiBhbnksIG1lc3NhZ2U6IExvZ2dlck1lc3NhZ2UsIGNhbGxiYWNrOiBDYWxsYmFjayl7XG4gICAgbG9nZ2VkQ2FsbGJhY2suY2FsbCh0aGlzLCBtZXNzYWdlLCBMT0dHRVJfTEVWRUxTLklORk8sIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtMb2dnZXJNZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0NhbGxiYWNrfSBjYWxsYmFja1xuICpcbiAqIEBmdW5jdGlvbiB3YXJuaW5nQ2FsbGJhY2tcbiAqXG4gKiBAbWVtYmVyT2YgZGItZGVjb3JhdG9ycy5lcnJvcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmdDYWxsYmFjayh0aGlzOiBhbnksIG1lc3NhZ2U6IExvZ2dlck1lc3NhZ2UsIGNhbGxiYWNrOiBDYWxsYmFjayl7XG4gICAgbG9nZ2VkQ2FsbGJhY2suY2FsbCh0aGlzLCBtZXNzYWdlLCBMT0dHRVJfTEVWRUxTLldBUk4sIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtMb2dnZXJNZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0NhbGxiYWNrfSBjYWxsYmFja1xuICpcbiAqIEBmdW5jdGlvbiBlcnJvckNhbGxiYWNrXG4gKlxuICogQG1lbWJlck9mIGRiLWRlY29yYXRvcnMuZXJyb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHRoaXM6IGFueSwgbWVzc2FnZTogTG9nZ2VyTWVzc2FnZSwgY2FsbGJhY2s6IENhbGxiYWNrKXtcbiAgICBsb2dnZWRDYWxsYmFjay5jYWxsKHRoaXMsIG1lc3NhZ2UsIExPR0dFUl9MRVZFTFMuRVJST1IsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtMb2dnZXJNZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0NhbGxiYWNrfSBjYWxsYmFja1xuICpcbiAqIEBmdW5jdGlvbiBjcml0aWNhbENhbGxiYWNrXG4gKlxuICogQG1lbWJlck9mIGRiLWRlY29yYXRvcnMuZXJyb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcml0aWNhbENhbGxiYWNrKHRoaXM6IGFueSwgbWVzc2FnZTogTG9nZ2VyTWVzc2FnZSwgY2FsbGJhY2s6IENhbGxiYWNrKXtcbiAgICBsb2dnZWRDYWxsYmFjay5jYWxsKHRoaXMsIG1lc3NhZ2UsIExPR0dFUl9MRVZFTFMuQ1JJVElDQUwsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBXcmFwcGVyIENsYXNzIGZvciBMb2dnZWQgRXJyb3JzXG4gKlxuICogQHBhcmFtIHtMb2dnZXJNZXNzYWdlfSBlcnJvclxuICogQHBhcmFtIHtudW1iZXJ9IGxldmVsIGRlZmF1bHRzIHRvIHtAbGluayBMT0dHRVJfTEVWRUxTLkVSUk9SfVxuICpcbiAqIEBjbGFzcyBMb2dnZWRFcnJvclxuICogQGV4dGVuZHMgRXJyb3JcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dnZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgbG9nZ2VkXG4gICAgICovXG4gICAgbG9nZ2VkID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihlcnJvcjogTG9nZ2VyTWVzc2FnZSwgbGV2ZWw6IG51bWJlciA9IExPR0dFUl9MRVZFTFMuRVJST1IpIHtcbiAgICAgICAgc3VwZXIoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvcik7XG4gICAgICAgIHRoaXMubG9nZ2VkID0gZXJyb3IgaW5zdGFuY2VvZiBMb2dnZWRFcnJvciAmJiBlcnJvci5sb2dnZWQ7XG4gICAgICAgIGlmICghdGhpcy5sb2dnZWQpXG4gICAgICAgICAgICBnZXRMb2dnZXIoKS5yZXBvcnQoZXJyb3IsIGxldmVsKTtcbiAgICB9XG59XG5cbi8qKlxuICogV3JhcHBlciBDbGFzcyBmb3IgQ3JpdGljYWwgRXJyb3JzXG4gKlxuICogQGNsYXNzIENyaXRpY2FsRXJyb3JcbiAqIEBleHRlbmRzIExvZ2dlZEVycm9yXG4gKlxuICovXG5leHBvcnQgY2xhc3MgQ3JpdGljYWxFcnJvciBleHRlbmRzIExvZ2dlZEVycm9ye1xuICAgIGNvbnN0cnVjdG9yKGVycm9yOiBMb2dnZXJNZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKGVycm9yLCBMT0dHRVJfTEVWRUxTLkNSSVRJQ0FMKTtcbiAgICB9XG59Il19
