"use strict";var __extends=function(){var e=function(t,o){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(t,o)};return function(t,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();!function(t){"object"==typeof module&&"object"==typeof module.exports?t(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","../logging"],t)}(function(t,o){Object.defineProperty(o,"__esModule",{value:!0}),o.CriticalError=o.LoggedError=o.criticalCallback=o.errorCallback=o.warningCallback=o.infoCallback=o.debugCallback=o.allCallback=o.loggedCallback=void 0;var e=t("../logging");function r(t,o,r){r||(r=o,o=e.LOGGER_LEVELS.INFO),(0,e.getLogger)().report(t instanceof Error?t:new l(t),o,this&&"loggedCallback"!==this.name?this:void 0),r(t)}o.loggedCallback=r,o.allCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.ALL,o)},o.debugCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.DEBUG,o)},o.infoCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.INFO,o)},o.warningCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.WARN,o)},o.errorCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.ERROR,o)},o.criticalCallback=function(t,o){r.call(this,t,e.LOGGER_LEVELS.CRITICAL,o)};n=Error,__extends(a,n);var n,l=a;function a(t,o){void 0===o&&(o=e.LOGGER_LEVELS.ERROR);var r=n.call(this,t instanceof Error?t.message:t)||this;return r.logged=!1,r.logged=t instanceof a&&t.logged,r.logged||(0,e.getLogger)().report(t,o),r}o.LoggedError=l;__extends(i,c=l);var c,t=i;function i(t){return c.call(this,t,e.LOGGER_LEVELS.CRITICAL)||this}o.CriticalError=t});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
