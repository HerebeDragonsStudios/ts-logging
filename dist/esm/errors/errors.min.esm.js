"use strict";var __extends=function(){var e=function(r,o){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,o){r.__proto__=o}||function(r,o){for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(r[a]=o[a])})(r,o)};return function(r,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function a(){this.constructor=r}e(r,o),r.prototype=null===o?Object.create(o):(a.prototype=o.prototype,new a)}}(),__spreadArray=function(r,o,a){if(a||2===arguments.length)for(var e,t=0,l=o.length;t<l;t++)!e&&t in o||((e=e||Array.prototype.slice.call(o,0,t))[t]=o[t]);return r.concat(e||Array.prototype.slice.call(o))};!function(r){"object"==typeof module&&"object"==typeof module.exports?r(require,exports):"function"==typeof define&&define.amd&&define(["require","exports","../logging"],r)}(function(r,o){Object.defineProperty(o,"__esModule",{value:!0}),o.CriticalError=o.LoggedError=o.criticalCallback=o.errorCallback=o.warningCallback=o.infoCallback=o.debugCallback=o.allCallback=o.loggedCallback=void 0;var n=r("../logging");function t(r,o,a){for(var e=[],t=3;t<arguments.length;t++)e[t-3]=arguments[t];a(new(l.bind.apply(l,__spreadArray([void 0,r,this&&"loggedCallback"!==this.name?this:void 0,o],e,!1))))}o.loggedCallback=t,o.allCallback=function(r,o){for(var a=[],e=2;e<arguments.length;e++)a[e-2]=arguments[e];t.call.apply(t,__spreadArray([this,r,n.LOGGER_LEVELS.ALL,o],a,!1))},o.debugCallback=function(r,o){for(var a=[],e=2;e<arguments.length;e++)a[e-2]=arguments[e];t.call.apply(t,__spreadArray([this,r,n.LOGGER_LEVELS.DEBUG,o],a,!1))},o.infoCallback=function(r,o){for(var a=[],e=2;e<arguments.length;e++)a[e-2]=arguments[e];t.call.apply(t,__spreadArray([this,r,n.LOGGER_LEVELS.INFO,o],a,!1))},o.warningCallback=function(r,o){for(var a=[],e=2;e<arguments.length;e++)a[e-2]=arguments[e];t.call.apply(t,__spreadArray([this,r,n.LOGGER_LEVELS.WARN,o],a,!1))},o.errorCallback=function(r,o){for(var a=[],e=2;e<arguments.length;e++)a[e-2]=arguments[e];t.call.apply(t,__spreadArray([this,r,n.LOGGER_LEVELS.ERROR,o],a,!1))},o.criticalCallback=function(r,o){for(var a=[],e=2;e<arguments.length;e++)a[e-2]=arguments[e];t.call.apply(t,__spreadArray([this,r,n.LOGGER_LEVELS.CRITICAL,o],a,!1))};i=Error,__extends(a,i);var i,l=a;function a(r,o,a){void 0===o&&(o=void 0),void 0===a&&(a=n.LOGGER_LEVELS.ALL);for(var e=[],t=3;t<arguments.length;t++)e[t-3]=arguments[t];var l=i.call(this,r instanceof Error?r.message:r)||this;return l.name="LoggedError",l.loggedAt=r instanceof Error&&"LoggedError"===r.name?r.loggedAt:void 0,l.issuer=o,(void 0===r.loggedAt||r.loggedAt<a)&&((r=(0,n.getLogger)()).report.apply(r,__spreadArray([l,a,o],e,!1)),l.loggedAt=a),l}o.LoggedError=l;__extends(e,c=l);var c,r=e;function e(r,o){void 0===o&&(o=void 0);for(var a=[],e=2;e<arguments.length;e++)a[e-2]=arguments[e];return c.apply(this,__spreadArray([r,o,n.LOGGER_LEVELS.CRITICAL],a,!1))||this}o.CriticalError=r});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
