"use strict";var __spreadArray=this&&this.__spreadArray||function(t,r,o){if(o||2===arguments.length)for(var e,n=0,i=r.length;n<i;n++)!e&&n in r||((e=e||Array.prototype.slice.call(r,0,n))[n]=r[n]);return t.concat(e||Array.prototype.slice.call(r))},errors_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.logSync=exports.logAsync=exports.StopWatch=void 0,require("../errors")),logging_1=require("./logging"),constants_1=require("./constants"),StopWatch=function(){function t(){}return t.prototype.start=function(){this.startTime=Date.now()},t.prototype.check=function(){if(!this.startTime)throw new Error("StopWatch didnt start");return Date.now()-this.startTime},t.prototype.stop=function(){var t=this.check();return this.startTime=void 0,t},t}();function logAsync(g,s){return void 0===g&&(g=constants_1.LOGGER_LEVELS.DEBUG),s||"boolean"!=typeof g||(s=g,g=constants_1.LOGGER_LEVELS.DEBUG),function(t,a,r){var o=r.value;r.value=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=t.pop();if(!e||"function"!=typeof e)throw new errors_1.CriticalError("Missing Callback");var n,i=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this;(0,logging_1.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",g,i,a,t.map(function(t){return t.toString()}).join(" | "));s&&(n=new StopWatch).start(),o.call.apply(o,__spreadArray(__spreadArray([this.__originalObject||this],t,!1),[function(t){for(var r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];if(n&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",g,i,a,n.stop()),t)return(0,logging_1.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",g,i,a,t),e(t);(0,logging_1.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",g,i,a,r?r.map(function(t){return t.toString()}).join(" | "):"void"),e.apply(void 0,__spreadArray([void 0],r,!1))}],!1))}}}function logSync(g,s){return void 0===g&&(g=constants_1.LOGGER_LEVELS.DEBUG),s||"boolean"!=typeof g||(s=g,g=constants_1.LOGGER_LEVELS.DEBUG),function(t,i,r){var a=r.value;r.value=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o,e=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this,n=((0,logging_1.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",g,e,i,t.map(function(t){return t.toString()}).join(" | ")),void 0);s&&(n=new StopWatch).start();try{o=a.call.apply(a,__spreadArray([this.__originalObject||this],t,!1))}catch(t){throw n&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",g,e,i,n.stop()),(0,logging_1.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",g,e,i,t),t}return n&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",g,e,i,n.stop()),(0,logging_1.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",g,e,i,o||"void"),o}}}exports.StopWatch=StopWatch,exports.logAsync=logAsync,exports.logSync=logSync;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
