"use strict";var currentLogger,__spreadArray=this&&this.__spreadArray||function(r,t,e){if(e||2===arguments.length)for(var o,s=0,n=t.length;s<n;s++)!o&&s in t||((o=o||Array.prototype.slice.call(t,0,s))[s]=t[s]);return r.concat(o||Array.prototype.slice.call(t))},constants_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.critical=exports.error=exports.warn=exports.debug=exports.all=exports.info=exports.setLogger=exports.getLogger=exports.LoggerImp=void 0,require("./constants")),errors_1=require("../errors"),utils_1=require("./utils"),LoggerImp=function(){function r(r,t,e,o,s){void 0===r&&(r=constants_1.LOGGER_LEVELS.INFO),void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===o&&(o=!1),void 0===s&&(s=constants_1.DEFAULT_TIMESTAMP_FORMAT),this.level=r,this.useTimestamp=t,this.logLevel=e,this.logStackTrace=o,this.timestampFormat=s}return r.prototype.buildMessage=function(r,t,e){void 0===e&&(e=void 0);for(var o=[],s=3;s<arguments.length;s++)o[s-3]=arguments[s];return r instanceof Error&&(r.stack,r=r.message),this.logLevel&&(r="[".concat(Object.keys(constants_1.LOGGER_LEVELS)[t],"] - ").concat(r)),e&&(r="[".concat(e.toString(),"]").concat(r)),this.useTimestamp&&(r="[".concat((0,utils_1.formatDate)(new Date,this.timestampFormat),"]").concat(r)),utils_1.stringFormat.apply(void 0,__spreadArray([r],o,!1))},r.prototype.report=function(r,t){void 0===t&&(t=constants_1.LOGGER_LEVELS.INFO);for(var e,o=[],s=2;s<arguments.length;s++)o[s-2]=arguments[s];if(!(t<this.level||r instanceof errors_1.LoggedError&&r.logged)){switch(t){case constants_1.LOGGER_LEVELS.WARN:e=console.warn;break;case constants_1.LOGGER_LEVELS.ERROR:case constants_1.LOGGER_LEVELS.CRITICAL:e=console.error;break;case constants_1.LOGGER_LEVELS.INFO:case constants_1.LOGGER_LEVELS.DEBUG:case constants_1.LOGGER_LEVELS.ALL:default:e=console.log}e(this.buildMessage.apply(this,__spreadArray([r,t,void 0],o,!1))),r instanceof Error&&r.stack&&this.logStackTrace&&(console.log(r),e(this.buildMessage("\n-- StackStrace:\n".concat(r.stack),t))),r instanceof errors_1.LoggedError&&(r.logged=!0)}},r.prototype.info=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.INFO],t,!1))},r.prototype.all=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.ALL],t,!1))},r.prototype.debug=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.DEBUG],t,!1))},r.prototype.warn=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.WARN],t,!1))},r.prototype.error=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.ERROR],t,!1))},r.prototype.critical=function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.CRITICAL],t,!1))},r.prototype.setLevel=function(r){this.debug((0,utils_1.stringFormat)(constants_1.LOGGING_MSG.LEVEL_CHANGED,this.level.toString(),r.toString())),this.level=r},r}();function getLogger(){return currentLogger=currentLogger||new LoggerImp}function setLogger(r){currentLogger=r,getLogger().debug(constants_1.LOGGING_MSG.LOGGER_CHANGED)}exports.LoggerImp=LoggerImp,exports.getLogger=getLogger,exports.setLogger=setLogger;var info=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=getLogger()).info.apply(t,__spreadArray([r],e,!1))},all=(exports.info=info,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=getLogger()).all.apply(t,__spreadArray([r],e,!1))}),debug=(exports.all=all,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=getLogger()).debug.apply(t,__spreadArray([r],e,!1))}),warn=(exports.debug=debug,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=getLogger()).warn.apply(t,__spreadArray([r],e,!1))}),error=(exports.warn=warn,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=getLogger()).error.apply(t,__spreadArray([r],e,!1))}),critical=(exports.error=error,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(t=getLogger()).critical.apply(t,__spreadArray([r],e,!1))});exports.critical=critical;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
