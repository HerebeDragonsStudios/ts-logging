"use strict";var currentLogger,__spreadArray=this&&this.__spreadArray||function(t,r,e){if(e||2===arguments.length)for(var o,s=0,a=r.length;s<a;s++)!o&&s in r||((o=o||Array.prototype.slice.call(r,0,s))[s]=r[s]);return t.concat(o||Array.prototype.slice.call(r))},constants_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.critical=exports.error=exports.warn=exports.debug=exports.all=exports.info=exports.setLogger=exports.getLogger=exports.LoggerImp=void 0,require("./constants")),utils_1=require("./utils"),LoggerImp=function(){function t(t,r,e,o,s){void 0===t&&(t=constants_1.LOGGER_LEVELS.INFO),void 0===r&&(r=!0),void 0===e&&(e=!0),void 0===o&&(o=!1),void 0===s&&(s=constants_1.DEFAULT_TIMESTAMP_FORMAT),this.level=t,this.useTimestamp=r,this.logLevel=e,this.logStackTrace=o,this.timestampFormat=s}return t.prototype.buildMessage=function(t,r,e){void 0===e&&(e=void 0);for(var o=[],s=3;s<arguments.length;s++)o[s-3]=arguments[s];return t instanceof Error&&(t=t.message),this.logLevel&&(t="[".concat(Object.keys(constants_1.LOGGER_LEVELS)[r],"] - ").concat(t)),e&&(t="[".concat(e.toString(),"]").concat(t)),this.useTimestamp&&(t="[".concat((0,utils_1.formatDate)(new Date,this.timestampFormat),"]").concat(t)),utils_1.stringFormat.apply(void 0,__spreadArray([t],o,!1))},t.prototype.report=function(t,r,e){void 0===r&&(r=constants_1.LOGGER_LEVELS.INFO),void 0===e&&(e=void 0);for(var o,s=[],a=3;a<arguments.length;a++)s[a-3]=arguments[a];if(!(r<this.level)){switch(r){case constants_1.LOGGER_LEVELS.WARN:o=console.warn;break;case constants_1.LOGGER_LEVELS.ERROR:case constants_1.LOGGER_LEVELS.CRITICAL:o=console.error;break;case constants_1.LOGGER_LEVELS.INFO:case constants_1.LOGGER_LEVELS.DEBUG:case constants_1.LOGGER_LEVELS.ALL:default:o=console.log}o(this.buildMessage.apply(this,__spreadArray([t,r,e],s,!1))),t instanceof Error&&t.stack&&this.logStackTrace&&o(this.buildMessage("\n-- StackStrace:\n{0}",r,e,t.stack))}},t.prototype.info=function(t,r){void 0===r&&(r=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.INFO,r],e,!1))},t.prototype.all=function(t,r){void 0===r&&(r=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.ALL,r],e,!1))},t.prototype.debug=function(t,r){void 0===r&&(r=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.DEBUG,r],e,!1))},t.prototype.warn=function(t,r){void 0===r&&(r=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.WARN,r],e,!1))},t.prototype.error=function(t,r){void 0===r&&(r=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.ERROR,r],e,!1))},t.prototype.critical=function(t,r){void 0===r&&(r=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.CRITICAL,r],e,!1))},t.prototype.setLevel=function(t){this.debug((0,utils_1.stringFormat)(constants_1.LOGGING_MSG.LEVEL_CHANGED,this.level.toString(),t.toString())),this.level=t},t}();function getLogger(){return currentLogger=currentLogger||new LoggerImp}function setLogger(t){currentLogger=t,getLogger().debug(constants_1.LOGGING_MSG.LOGGER_CHANGED)}exports.LoggerImp=LoggerImp,exports.getLogger=getLogger,exports.setLogger=setLogger;var info=function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(r=getLogger()).info.apply(r,__spreadArray([t,this],e,!1))},all=(exports.info=info,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(r=getLogger()).all.apply(r,__spreadArray([t,this],e,!1))}),debug=(exports.all=all,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(r=getLogger()).debug.apply(r,__spreadArray([t,this],e,!1))}),warn=(exports.debug=debug,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(r=getLogger()).warn.apply(r,__spreadArray([t,this],e,!1))}),error=(exports.warn=warn,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(r=getLogger()).error.apply(r,__spreadArray([t,this],e,!1))}),critical=(exports.error=error,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(r=getLogger()).critical.apply(r,__spreadArray([t,this],e,!1))});exports.critical=critical;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
