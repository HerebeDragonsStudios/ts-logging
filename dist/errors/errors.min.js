"use strict";var __extends=this&&this.__extends||function(){var a=function(l,r){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(l,r){l.__proto__=r}||function(l,r){for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(l[o]=r[o])})(l,r)};return function(l,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function o(){this.constructor=l}a(l,r),l.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),logging_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.CriticalError=exports.LoggedError=exports.criticalCallback=exports.errorCallback=exports.warningCallback=exports.infoCallback=exports.debugCallback=exports.allCallback=exports.loggedCallback=void 0,require("../logging"));function loggedCallback(l,r,o){o||(o=r,r=logging_1.LOGGER_LEVELS.INFO),(0,logging_1.getLogger)().report(l instanceof Error?l:new LoggedError(l),r,"loggedCallback"!==this.name?this:void 0),o(l)}function allCallback(l,r){loggedCallback.call(this,l,logging_1.LOGGER_LEVELS.ALL,r)}function debugCallback(l,r){loggedCallback.call(this,l,logging_1.LOGGER_LEVELS.DEBUG,r)}function infoCallback(l,r){loggedCallback.call(this,l,logging_1.LOGGER_LEVELS.INFO,r)}function warningCallback(l,r){loggedCallback.call(this,l,logging_1.LOGGER_LEVELS.WARN,r)}function errorCallback(l,r){loggedCallback.call(this,l,logging_1.LOGGER_LEVELS.ERROR,r)}function criticalCallback(l,r){loggedCallback.call(this,l,logging_1.LOGGER_LEVELS.CRITICAL,r)}exports.loggedCallback=loggedCallback,exports.allCallback=allCallback,exports.debugCallback=debugCallback,exports.infoCallback=infoCallback,exports.warningCallback=warningCallback,exports.errorCallback=errorCallback,exports.criticalCallback=criticalCallback;var LoggedError=function(a){function t(l,r){void 0===r&&(r=logging_1.LOGGER_LEVELS.ERROR);var o=a.call(this,l instanceof Error?l.message:l)||this;return o.logged=!1,o.logged=l instanceof t&&l.logged,o.logged||(0,logging_1.getLogger)().report(l,r),o}return __extends(t,a),t}(Error),CriticalError=function(r){function l(l){return r.call(this,l,logging_1.LOGGER_LEVELS.CRITICAL)||this}return __extends(l,r),l}(exports.LoggedError=LoggedError);exports.CriticalError=CriticalError;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
