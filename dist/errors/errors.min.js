"use strict";var __extends=this&&this.__extends||function(){var o=function(r,l){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,l){r.__proto__=l}||function(r,l){for(var a in l)Object.prototype.hasOwnProperty.call(l,a)&&(r[a]=l[a])})(r,l)};return function(r,l){if("function"!=typeof l&&null!==l)throw new TypeError("Class extends value "+String(l)+" is not a constructor or null");function a(){this.constructor=r}o(r,l),r.prototype=null===l?Object.create(l):(a.prototype=l.prototype,new a)}}(),__spreadArray=this&&this.__spreadArray||function(r,l,a){if(a||2===arguments.length)for(var o,e=0,t=l.length;e<t;e++)!o&&e in l||((o=o||Array.prototype.slice.call(l,0,e))[e]=l[e]);return r.concat(o||Array.prototype.slice.call(l))},logging_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.CriticalError=exports.LoggedError=exports.criticalCallback=exports.errorCallback=exports.warningCallback=exports.infoCallback=exports.debugCallback=exports.allCallback=exports.loggedCallback=void 0,require("../logging"));function loggedCallback(r,l,a){for(var o=[],e=3;e<arguments.length;e++)o[e-3]=arguments[e];a(new(LoggedError.bind.apply(LoggedError,__spreadArray([void 0,r,this&&"loggedCallback"!==this.name?this:void 0,l],o,!1))))}function allCallback(r,l){for(var a=[],o=2;o<arguments.length;o++)a[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.ALL,l],a,!1))}function debugCallback(r,l){for(var a=[],o=2;o<arguments.length;o++)a[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.DEBUG,l],a,!1))}function infoCallback(r,l){for(var a=[],o=2;o<arguments.length;o++)a[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.INFO,l],a,!1))}function warningCallback(r,l){for(var a=[],o=2;o<arguments.length;o++)a[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.WARN,l],a,!1))}function errorCallback(r,l){for(var a=[],o=2;o<arguments.length;o++)a[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.ERROR,l],a,!1))}function criticalCallback(r,l){for(var a=[],o=2;o<arguments.length;o++)a[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.CRITICAL,l],a,!1))}exports.loggedCallback=loggedCallback,exports.allCallback=allCallback,exports.debugCallback=debugCallback,exports.infoCallback=infoCallback,exports.warningCallback=warningCallback,exports.errorCallback=errorCallback,exports.criticalCallback=criticalCallback;var LoggedError=function(g){function r(r,l,a){void 0===l&&(l=void 0),void 0===a&&(a=logging_1.LOGGER_LEVELS.ALL);for(var o=[],e=3;e<arguments.length;e++)o[e-3]=arguments[e];var t=g.call(this,r instanceof Error?r.message:r)||this;return t.name="LoggedError",t.loggedAt=r instanceof Error&&"LoggedError"===r.name?r.loggedAt:void 0,t.issuer=l,(void 0===r.loggedAt||r.loggedAt<a)&&((r=(0,logging_1.getLogger)()).report.apply(r,__spreadArray([t,a,l],o,!1)),t.loggedAt=a),t}return __extends(r,g),r}(Error),CriticalError=function(e){function r(r,l){void 0===l&&(l=void 0);for(var a=[],o=2;o<arguments.length;o++)a[o-2]=arguments[o];return e.apply(this,__spreadArray([r,l,logging_1.LOGGER_LEVELS.CRITICAL],a,!1))||this}return __extends(r,e),r}(exports.LoggedError=LoggedError);exports.CriticalError=CriticalError;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
