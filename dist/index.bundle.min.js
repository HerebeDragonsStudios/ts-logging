"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(r,t,e,o){void 0===o&&(o=e),Object.defineProperty(r,o,{enumerable:!0,get:function(){return t[e]}})}:function(r,t,e,o){r[o=void 0===o?e:o]=t[e]}),__exportStar=this&&this.__exportStar||function(r,t){for(var e in r)"default"===e||Object.prototype.hasOwnProperty.call(t,e)||__createBinding(t,r,e)},__extends=(Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(require("./errors"),exports),__exportStar(require("./logging"),exports),this&&this.__extends||function(){var o=function(r,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(r[e]=t[e])})(r,t)};return function(r,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=r}o(r,t),r.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}}()),__spreadArray=this&&this.__spreadArray||function(r,t,e){if(e||2===arguments.length)for(var o,a=0,n=t.length;a<n;a++)!o&&a in t||((o=o||Array.prototype.slice.call(t,0,a))[a]=t[a]);return r.concat(o||Array.prototype.slice.call(t))},logging_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.CriticalError=exports.LoggedError=exports.criticalCallback=exports.errorCallback=exports.warningCallback=exports.infoCallback=exports.debugCallback=exports.allCallback=exports.loggedCallback=void 0,require("../logging"));function loggedCallback(r,t,e){for(var o=[],a=3;a<arguments.length;a++)o[a-3]=arguments[a];e(new(LoggedError.bind.apply(LoggedError,__spreadArray([void 0,r,this&&"loggedCallback"!==this.name?this:void 0,t],o,!1))))}function allCallback(r,t){for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.ALL,t],e,!1))}function debugCallback(r,t){for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.DEBUG,t],e,!1))}function infoCallback(r,t){for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.INFO,t],e,!1))}function warningCallback(r,t){for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.WARN,t],e,!1))}function errorCallback(r,t){for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.ERROR,t],e,!1))}function criticalCallback(r,t){for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];loggedCallback.call.apply(loggedCallback,__spreadArray([this,r,logging_1.LOGGER_LEVELS.CRITICAL,t],e,!1))}exports.loggedCallback=loggedCallback,exports.allCallback=allCallback,exports.debugCallback=debugCallback,exports.infoCallback=infoCallback,exports.warningCallback=warningCallback,exports.errorCallback=errorCallback,exports.criticalCallback=criticalCallback;var LoggedError=function(i){function r(r,t,e){void 0===t&&(t=void 0),void 0===e&&(e=logging_1.LOGGER_LEVELS.ALL);for(var o=[],a=3;a<arguments.length;a++)o[a-3]=arguments[a];var n=i.call(this,r instanceof Error?r.message:r)||this;return n.name="LoggedError",n.loggedAt=r instanceof Error&&"LoggedError"===r.name?r.loggedAt:void 0,n.issuer=t,(void 0===r.loggedAt||r.loggedAt<e)&&((r=(0,logging_1.getLogger)()).report.apply(r,__spreadArray([n,e,t],o,!1)),n.loggedAt=e),n}return __extends(r,i),r}(Error),CriticalError=function(a){function r(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];return a.apply(this,__spreadArray([r,t,logging_1.LOGGER_LEVELS.CRITICAL],e,!1))||this}return __extends(r,a),r}(exports.LoggedError=LoggedError),__createBinding=(exports.CriticalError=CriticalError,this&&this.__createBinding||(Object.create?function(r,t,e,o){void 0===o&&(o=e),Object.defineProperty(r,o,{enumerable:!0,get:function(){return t[e]}})}:function(r,t,e,o){r[o=void 0===o?e:o]=t[e]})),__exportStar=this&&this.__exportStar||function(r,t){for(var e in r)"default"===e||Object.prototype.hasOwnProperty.call(t,e)||__createBinding(t,r,e)},__spreadArray=(Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(require("./errors"),exports),Object.defineProperty(exports,"__esModule",{value:!0}),exports.DAYS_OF_WEEK_NAMES=exports.MONTH_NAMES=exports.DEFAULT_TIMESTAMP_FORMAT=exports.LOGGING_MSG=exports.LOGGER_LEVELS=void 0,exports.LOGGER_LEVELS={ALL:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,CRITICAL:5},exports.LOGGING_MSG={LEVEL_CHANGED:"Logger Level changed from {0} to {1}",LOGGER_CHANGED:"Logger changed"},exports.DEFAULT_TIMESTAMP_FORMAT="dd/MM/yyyy HH:mm:ss:S",exports.MONTH_NAMES=["January","February","March","April","May","June","July","August","September","October","November","December"],exports.DAYS_OF_WEEK_NAMES=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],this&&this.__spreadArray||function(r,t,e){if(e||2===arguments.length)for(var o,a=0,n=t.length;a<n;a++)!o&&a in t||((o=o||Array.prototype.slice.call(t,0,a))[a]=t[a]);return r.concat(o||Array.prototype.slice.call(t))}),errors_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.logSync=exports.logAsync=exports.StopWatch=void 0,require("../errors")),logging_1=require("./logging"),constants_1=require("./constants"),StopWatch=function(){function r(){}return r.prototype.start=function(){this.startTime=Date.now()},r.prototype.check=function(){if(!this.startTime)throw new Error("StopWatch didnt start");return Date.now()-this.startTime},r.prototype.stop=function(){var r=this.check();return this.startTime=void 0,r},r}();function logAsync(s,l){return void 0===s&&(s=constants_1.LOGGER_LEVELS.DEBUG),l||"boolean"!=typeof s||(l=s,s=constants_1.LOGGER_LEVELS.DEBUG),function(r,i,t){var e=t.value;t.value=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];var o=r.pop();if(!o||"function"!=typeof o)throw new errors_1.CriticalError("Missing Callback");var a,n=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this;(0,logging_1.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",s,n,i,r.map(function(r){return r.toString()}).join(" | "));l&&(a=new StopWatch).start(),e.call.apply(e,__spreadArray(__spreadArray([this.__originalObject||this],r,!1),[function(r){for(var t=[],e=1;e<arguments.length;e++)t[e-1]=arguments[e];if(a&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,n,i,a.stop()),r)return(0,logging_1.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",s,n,i,r),o(r);(0,logging_1.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",s,n,i,t?t.map(function(r){return r.toString()}).join(" | "):"void"),o.apply(void 0,__spreadArray([void 0],t,!1))}],!1))}}}function logSync(s,l){return void 0===s&&(s=constants_1.LOGGER_LEVELS.DEBUG),l||"boolean"!=typeof s||(l=s,s=constants_1.LOGGER_LEVELS.DEBUG),function(r,n,t){var i=t.value;t.value=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];var e,o=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this,a=((0,logging_1.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",s,o,n,r.map(function(r){return r.toString()}).join(" | ")),void 0);l&&(a=new StopWatch).start();try{e=i.call.apply(i,__spreadArray([this.__originalObject||this],r,!1))}catch(r){throw a&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,o,n,a.stop()),(0,logging_1.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",s,o,n,r),r}return a&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,o,n,a.stop()),(0,logging_1.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",s,o,n,e||"void"),e}}}exports.StopWatch=StopWatch,exports.logAsync=logAsync,exports.logSync=logSync;var currentLogger,__createBinding=this&&this.__createBinding||(Object.create?function(r,t,e,o){void 0===o&&(o=e),Object.defineProperty(r,o,{enumerable:!0,get:function(){return t[e]}})}:function(r,t,e,o){r[o=void 0===o?e:o]=t[e]}),__exportStar=this&&this.__exportStar||function(r,t){for(var e in r)"default"===e||Object.prototype.hasOwnProperty.call(t,e)||__createBinding(t,r,e)},__spreadArray=(Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(require("./constants"),exports),__exportStar(require("./logging"),exports),__exportStar(require("./decorators"),exports),__exportStar(require("./utils"),exports),this&&this.__spreadArray||function(r,t,e){if(e||2===arguments.length)for(var o,a=0,n=t.length;a<n;a++)!o&&a in t||((o=o||Array.prototype.slice.call(t,0,a))[a]=t[a]);return r.concat(o||Array.prototype.slice.call(t))}),constants_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.critical=exports.error=exports.warn=exports.debug=exports.all=exports.info=exports.setLogger=exports.getLogger=exports.LoggerImp=void 0,require("./constants")),utils_1=require("./utils"),LoggerImp=function(){function r(r,t,e,o,a){void 0===r&&(r=constants_1.LOGGER_LEVELS.INFO),void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===o&&(o=!1),void 0===a&&(a=constants_1.DEFAULT_TIMESTAMP_FORMAT),this.level=r,this.useTimestamp=t,this.logLevel=e,this.logStackTrace=o,this.timestampFormat=a}return r.prototype.buildMessage=function(r,t,e){void 0===e&&(e=void 0);for(var o=[],a=3;a<arguments.length;a++)o[a-3]=arguments[a];return r instanceof Error&&(r=r.message),e&&(r="[".concat(e.toString(),"]").concat(r)),this.logLevel&&(r="[".concat(Object.keys(constants_1.LOGGER_LEVELS)[t],"] - ").concat(r)),this.useTimestamp&&(r="[".concat((0,utils_1.formatDate)(new Date,this.timestampFormat),"]").concat(r)),utils_1.stringFormat.apply(void 0,__spreadArray([r],o,!1))},r.prototype.report=function(r,t,e){void 0===t&&(t=constants_1.LOGGER_LEVELS.INFO),void 0===e&&(e=void 0);for(var o,a=[],n=3;n<arguments.length;n++)a[n-3]=arguments[n];if(!(t<this.level)){switch(t){case constants_1.LOGGER_LEVELS.WARN:o=console.warn;break;case constants_1.LOGGER_LEVELS.ERROR:case constants_1.LOGGER_LEVELS.CRITICAL:o=console.error;break;case constants_1.LOGGER_LEVELS.INFO:case constants_1.LOGGER_LEVELS.DEBUG:case constants_1.LOGGER_LEVELS.ALL:default:o=console.log}o(this.buildMessage.apply(this,__spreadArray([r,t,e],a,!1))),r instanceof Error&&r.stack&&this.logStackTrace&&o(this.buildMessage("\n-- StackStrace:\n{0}",t,e,r.stack))}},r.prototype.info=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.INFO,t],e,!1))},r.prototype.all=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.ALL,t],e,!1))},r.prototype.debug=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.DEBUG,t],e,!1))},r.prototype.warn=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.WARN,t],e,!1))},r.prototype.error=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.ERROR,t],e,!1))},r.prototype.critical=function(r,t){void 0===t&&(t=void 0);for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];this.report.apply(this,__spreadArray([r,constants_1.LOGGER_LEVELS.CRITICAL,t],e,!1))},r.prototype.setLevel=function(r){this.debug((0,utils_1.stringFormat)(constants_1.LOGGING_MSG.LEVEL_CHANGED,this.level.toString(),r.toString())),this.level=r},r}();function getLogger(){return currentLogger=currentLogger||new LoggerImp}function setLogger(r){currentLogger=r,getLogger().debug(constants_1.LOGGING_MSG.LOGGER_CHANGED)}exports.LoggerImp=LoggerImp,exports.getLogger=getLogger,exports.setLogger=setLogger;var info=function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=getLogger()).info.apply(t,__spreadArray([r,this],e,!1))},all=(exports.info=info,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=getLogger()).all.apply(t,__spreadArray([r,this],e,!1))}),debug=(exports.all=all,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=getLogger()).debug.apply(t,__spreadArray([r,this],e,!1))}),warn=(exports.debug=debug,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=getLogger()).warn.apply(t,__spreadArray([r,this],e,!1))}),error=(exports.warn=warn,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=getLogger()).error.apply(t,__spreadArray([r,this],e,!1))}),critical=(exports.error=error,function(r){for(var t,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];(t=getLogger()).critical.apply(t,__spreadArray([r,this],e,!1))}),constants_1=(exports.critical=critical,Object.defineProperty(exports,"__esModule",{value:!0}),exports.twoDigitPad=exports.formatDate=exports.stringFormat=void 0,require("./constants"));function stringFormat(r){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];return r.replace(/{(\d+)}/g,function(r,t){return void 0!==e[t]?e[t]:r})}function formatDate(r,t){void 0===t&&(t="yyyy/MM/dd");var e=r.getDate(),o=r.getMonth(),a=r.getFullYear(),n=r.getHours(),i=r.getMinutes(),s=r.getSeconds(),c=r.getMilliseconds(),l=n%12,p=twoDigitPad(l),_=twoDigitPad(n),d=twoDigitPad(i),u=twoDigitPad(s),L=n<12?"AM":"PM",r=constants_1.DAYS_OF_WEEK_NAMES[r.getDay()],h=r.substr(0,3),E=twoDigitPad(e),g=o+1,f=twoDigitPad(g),o=constants_1.MONTH_NAMES[o],y=o.substr(0,3),a=a+"",v=a.substr(2,2);return t=-1<(t=t.replace("hh",p).replace("h",l.toString()).replace("HH",_).replace("H",n.toString()).replace("mm",d).replace("m",i.toString()).replace("ss",u).replace("s",s.toString()).replace("S",c.toString()).replace("dd",E).replace("d",e.toString()).replace("EEEE",r).replace("EEE",h).replace("yyyy",a).replace("yy",v).replace("aaa",L)).indexOf("MMM")?t.replace("MMMM",o).replace("MMM",y):t.replace("MM",f).replace("M",g.toString())}function twoDigitPad(r){return r<10?"0"+r:r.toString()}exports.stringFormat=stringFormat,exports.formatDate=formatDate,exports.twoDigitPad=twoDigitPad;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
