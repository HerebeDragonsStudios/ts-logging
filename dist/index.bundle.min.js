"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(t,r,e,o){void 0===o&&(o=e),Object.defineProperty(t,o,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,o){t[o=void 0===o?e:o]=r[e]}),__exportStar=this&&this.__exportStar||function(t,r){for(var e in t)"default"===e||Object.prototype.hasOwnProperty.call(r,e)||__createBinding(r,t,e)},__extends=(Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(require("./errors"),exports),__exportStar(require("./logging"),exports),this&&this.__extends||function(){var o=function(t,r){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=t}o(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}()),logging_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.CriticalError=exports.LoggedError=exports.criticalCallback=exports.errorCallback=exports.warningCallback=exports.infoCallback=exports.debugCallback=exports.allCallback=exports.loggedCallback=void 0,require("../logging"));function loggedCallback(t,r,e){e||(e=r,r=logging_1.LOGGER_LEVELS.INFO),(0,logging_1.getLogger)().report(t instanceof Error?t:new LoggedError(t),r,this&&"loggedCallback"!==this.name?this:void 0),e(t)}function allCallback(t,r){loggedCallback.call(this,t,logging_1.LOGGER_LEVELS.ALL,r)}function debugCallback(t,r){loggedCallback.call(this,t,logging_1.LOGGER_LEVELS.DEBUG,r)}function infoCallback(t,r){loggedCallback.call(this,t,logging_1.LOGGER_LEVELS.INFO,r)}function warningCallback(t,r){loggedCallback.call(this,t,logging_1.LOGGER_LEVELS.WARN,r)}function errorCallback(t,r){loggedCallback.call(this,t,logging_1.LOGGER_LEVELS.ERROR,r)}function criticalCallback(t,r){loggedCallback.call(this,t,logging_1.LOGGER_LEVELS.CRITICAL,r)}exports.loggedCallback=loggedCallback,exports.allCallback=allCallback,exports.debugCallback=debugCallback,exports.infoCallback=infoCallback,exports.warningCallback=warningCallback,exports.errorCallback=errorCallback,exports.criticalCallback=criticalCallback;var LoggedError=function(o){function n(t,r){void 0===r&&(r=logging_1.LOGGER_LEVELS.ERROR);var e=o.call(this,t instanceof Error?t.message:t)||this;return e.logged=!1,e.logged=t instanceof n&&t.logged,e.logged||(0,logging_1.getLogger)().report(t,r),e}return __extends(n,o),n}(Error),CriticalError=function(r){function t(t){return r.call(this,t,logging_1.LOGGER_LEVELS.CRITICAL)||this}return __extends(t,r),t}(exports.LoggedError=LoggedError),__createBinding=(exports.CriticalError=CriticalError,this&&this.__createBinding||(Object.create?function(t,r,e,o){void 0===o&&(o=e),Object.defineProperty(t,o,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,o){t[o=void 0===o?e:o]=r[e]})),__exportStar=this&&this.__exportStar||function(t,r){for(var e in t)"default"===e||Object.prototype.hasOwnProperty.call(r,e)||__createBinding(r,t,e)},__spreadArray=(Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(require("./errors"),exports),Object.defineProperty(exports,"__esModule",{value:!0}),exports.DAYS_OF_WEEK_NAMES=exports.MONTH_NAMES=exports.DEFAULT_TIMESTAMP_FORMAT=exports.LOGGING_MSG=exports.LOGGER_LEVELS=void 0,exports.LOGGER_LEVELS={ALL:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,CRITICAL:5},exports.LOGGING_MSG={LEVEL_CHANGED:"Logger Level changed from {0} to {1}",LOGGER_CHANGED:"Logger changed"},exports.DEFAULT_TIMESTAMP_FORMAT="dd/MM/yyyy HH:mm:ss:S",exports.MONTH_NAMES=["January","February","March","April","May","June","July","August","September","October","November","December"],exports.DAYS_OF_WEEK_NAMES=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],this&&this.__spreadArray||function(t,r,e){if(e||2===arguments.length)for(var o,n=0,a=r.length;n<a;n++)!o&&n in r||((o=o||Array.prototype.slice.call(r,0,n))[n]=r[n]);return t.concat(o||Array.prototype.slice.call(r))}),errors_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.logSync=exports.logAsync=exports.StopWatch=void 0,require("../errors")),logging_1=require("./logging"),constants_1=require("./constants"),StopWatch=function(){function t(){}return t.prototype.start=function(){this.startTime=Date.now()},t.prototype.check=function(){if(!this.startTime)throw new Error("StopWatch didnt start");return Date.now()-this.startTime},t.prototype.stop=function(){var t=this.check();return this.startTime=void 0,t},t}();function logAsync(s,g){return void 0===s&&(s=constants_1.LOGGER_LEVELS.DEBUG),g||"boolean"!=typeof s||(g=s,s=constants_1.LOGGER_LEVELS.DEBUG),function(t,i,r){var e=r.value;r.value=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o=t.pop();if(!o||"function"!=typeof o)throw new errors_1.CriticalError("Missing Callback");var n,a=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this;(0,logging_1.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",s,a,i,t.map(function(t){return t.toString()}).join(" | "));g&&(n=new StopWatch).start(),e.call.apply(e,__spreadArray(__spreadArray([this.__originalObject||this],t,!1),[function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];if(n&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,a,i,n.stop()),t)return(0,logging_1.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",s,a,i,t),o(t);(0,logging_1.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",s,a,i,r?r.map(function(t){return t.toString()}).join(" | "):"void"),o.apply(void 0,__spreadArray([void 0],r,!1))}],!1))}}}function logSync(s,g){return void 0===s&&(s=constants_1.LOGGER_LEVELS.DEBUG),g||"boolean"!=typeof s||(g=s,s=constants_1.LOGGER_LEVELS.DEBUG),function(t,a,r){var i=r.value;r.value=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e,o=this.name&&"Function"!==this.name?this.name:this.constructor&&this.constructor.name||this,n=((0,logging_1.getLogger)().report("[{0}] - Entering Method {1} with args: {2}",s,o,a,t.map(function(t){return t.toString()}).join(" | ")),void 0);g&&(n=new StopWatch).start();try{e=i.call.apply(i,__spreadArray([this.__originalObject||this],t,!1))}catch(t){throw n&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,o,a,n.stop()),(0,logging_1.getLogger)().report("[{0}][ERROR] - Leaving Method {1} with error {2}",s,o,a,t),t}return n&&(0,logging_1.getLogger)().report("[{0}][BENCHMARK] - Leaving Method {1} after {2}ms",s,o,a,n.stop()),(0,logging_1.getLogger)().report("[{0}] - Leaving Method {1} with results: {2}",s,o,a,e||"void"),e}}}exports.StopWatch=StopWatch,exports.logAsync=logAsync,exports.logSync=logSync;var currentLogger,__createBinding=this&&this.__createBinding||(Object.create?function(t,r,e,o){void 0===o&&(o=e),Object.defineProperty(t,o,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,o){t[o=void 0===o?e:o]=r[e]}),__exportStar=this&&this.__exportStar||function(t,r){for(var e in t)"default"===e||Object.prototype.hasOwnProperty.call(r,e)||__createBinding(r,t,e)},__spreadArray=(Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(require("./constants"),exports),__exportStar(require("./logging"),exports),__exportStar(require("./decorators"),exports),__exportStar(require("./utils"),exports),this&&this.__spreadArray||function(t,r,e){if(e||2===arguments.length)for(var o,n=0,a=r.length;n<a;n++)!o&&n in r||((o=o||Array.prototype.slice.call(r,0,n))[n]=r[n]);return t.concat(o||Array.prototype.slice.call(r))}),constants_1=(Object.defineProperty(exports,"__esModule",{value:!0}),exports.critical=exports.error=exports.warn=exports.debug=exports.all=exports.info=exports.setLogger=exports.getLogger=exports.LoggerImp=void 0,require("./constants")),errors_1=require("../errors"),utils_1=require("./utils"),LoggerImp=function(){function t(t,r,e,o,n){void 0===t&&(t=constants_1.LOGGER_LEVELS.INFO),void 0===r&&(r=!0),void 0===e&&(e=!0),void 0===o&&(o=!1),void 0===n&&(n=constants_1.DEFAULT_TIMESTAMP_FORMAT),this.level=t,this.useTimestamp=r,this.logLevel=e,this.logStackTrace=o,this.timestampFormat=n}return t.prototype.buildMessage=function(t,r,e){void 0===e&&(e=void 0);for(var o=[],n=3;n<arguments.length;n++)o[n-3]=arguments[n];return t instanceof Error&&(t.stack,t=t.message),this.logLevel&&(t="[".concat(Object.keys(constants_1.LOGGER_LEVELS)[r],"] - ").concat(t)),e&&(t="[".concat(e.toString(),"]").concat(t)),this.useTimestamp&&(t="[".concat((0,utils_1.formatDate)(new Date,this.timestampFormat),"]").concat(t)),utils_1.stringFormat.apply(void 0,__spreadArray([t],o,!1))},t.prototype.report=function(t,r){void 0===r&&(r=constants_1.LOGGER_LEVELS.INFO);for(var e,o=[],n=2;n<arguments.length;n++)o[n-2]=arguments[n];if(!(r<this.level||t instanceof errors_1.LoggedError&&t.logged)){switch(r){case constants_1.LOGGER_LEVELS.WARN:e=console.warn;break;case constants_1.LOGGER_LEVELS.ERROR:case constants_1.LOGGER_LEVELS.CRITICAL:e=console.error;break;case constants_1.LOGGER_LEVELS.INFO:case constants_1.LOGGER_LEVELS.DEBUG:case constants_1.LOGGER_LEVELS.ALL:default:e=console.log}e(this.buildMessage.apply(this,__spreadArray([t,r,void 0],o,!1))),t instanceof Error&&t.stack&&this.logStackTrace&&(console.log(t),e(this.buildMessage("\n-- StackStrace:\n".concat(t.stack),r))),t instanceof errors_1.LoggedError&&(t.logged=!0)}},t.prototype.info=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.INFO],r,!1))},t.prototype.all=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.ALL],r,!1))},t.prototype.debug=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.DEBUG],r,!1))},t.prototype.warn=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.WARN],r,!1))},t.prototype.error=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.ERROR],r,!1))},t.prototype.critical=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];this.report.apply(this,__spreadArray([t,constants_1.LOGGER_LEVELS.CRITICAL],r,!1))},t.prototype.setLevel=function(t){this.debug((0,utils_1.stringFormat)(constants_1.LOGGING_MSG.LEVEL_CHANGED,this.level.toString(),t.toString())),this.level=t},t}();function getLogger(){return currentLogger=currentLogger||new LoggerImp}function setLogger(t){currentLogger=t,getLogger().debug(constants_1.LOGGING_MSG.LOGGER_CHANGED)}exports.LoggerImp=LoggerImp,exports.getLogger=getLogger,exports.setLogger=setLogger;var info=function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(r=getLogger()).info.apply(r,__spreadArray([t],e,!1))},all=(exports.info=info,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(r=getLogger()).all.apply(r,__spreadArray([t],e,!1))}),debug=(exports.all=all,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(r=getLogger()).debug.apply(r,__spreadArray([t],e,!1))}),warn=(exports.debug=debug,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(r=getLogger()).warn.apply(r,__spreadArray([t],e,!1))}),error=(exports.warn=warn,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(r=getLogger()).error.apply(r,__spreadArray([t],e,!1))}),critical=(exports.error=error,function(t){for(var r,e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];return(r=getLogger()).critical.apply(r,__spreadArray([t],e,!1))}),constants_1=(exports.critical=critical,Object.defineProperty(exports,"__esModule",{value:!0}),exports.twoDigitPad=exports.formatDate=exports.stringFormat=void 0,require("./constants"));function stringFormat(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return t.replace(/{(\d+)}/g,function(t,r){return void 0!==e[r]?e[r]:t})}function formatDate(t,r){void 0===r&&(r="yyyy/MM/dd");var e=t.getDate(),o=t.getMonth(),n=t.getFullYear(),a=t.getHours(),i=t.getMinutes(),s=t.getSeconds(),l=t.getMilliseconds(),g=a%12,p=twoDigitPad(g),_=twoDigitPad(a),u=twoDigitPad(i),d=twoDigitPad(s),L=a<12?"AM":"PM",t=constants_1.DAYS_OF_WEEK_NAMES[t.getDay()],E=t.substr(0,3),f=twoDigitPad(e),c=o+1,h=twoDigitPad(c),o=constants_1.MONTH_NAMES[o],y=o.substr(0,3),n=n+"",v=n.substr(2,2);return r=-1<(r=r.replace("hh",p).replace("h",g.toString()).replace("HH",_).replace("H",a.toString()).replace("mm",u).replace("m",i.toString()).replace("ss",d).replace("s",s.toString()).replace("S",l.toString()).replace("dd",f).replace("d",e.toString()).replace("EEEE",t).replace("EEE",E).replace("yyyy",n).replace("yy",v).replace("aaa",L)).indexOf("MMM")?r.replace("MMMM",o).replace("MMM",y):r.replace("MM",h).replace("M",c.toString())}function twoDigitPad(t){return t<10?"0"+t:t.toString()}exports.stringFormat=stringFormat,exports.formatDate=formatDate,exports.twoDigitPad=twoDigitPad;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
